!_TAG_FILE_FORMAT	2	/extended format/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_ENCODING	utf-8	//
!_TAG_PROGRAM_NAME	nix-doc tags	//
!_TAG_PROGRAM_URL	https://github.com/lf-/nix-doc	//
CATTESTVAR	flake.nix	/^              CATTESTVAR = "It worked!";$/;"	m
FilterAttrsOfAttrsFlatMapInner	nix/utils.nix	/^  FilterAttrsOfAttrsFlatMapInner = pkgs: categories: twoArgFunc: SetOfCategoryAttrs: let$/;"	f
FilterAttrsOfListsFlatMapInner	nix/utils.nix	/^  FilterAttrsOfListsFlatMapInner = pkgs: categories: oneArgFunc: SetOfCategoryLists: let$/;"	f
RCName	flake.nix	/^            RCName = "myLuaConf";$/;"	m
RCName	nix/NeovimBuilder.nix	/^      RCName = "";$/;"	m
RCName	flake.nix	/^            RCName = "myLuaConf";$/;"	m
buildVimPlugin	nix/pluginOverlay.nix	/^  inherit (super.vimUtils) buildVimPlugin;$/;"	m
builder	nix/NeovimBuilder.nix	/^        builder = builtins.toFile "builder.sh" ''$/;"	m
builder	nix/NeovimBuilder.nix	/^      builder = let$/;"	m
categories	flake.nix	/^          inherit categories;$/;"	m
colorscheme	flake.nix	/^          colorscheme = "onedark";$/;"	m
colorscheme	flake.nix	/^          colorscheme = "onedark";$/;"	m
configure	nix/NeovimBuilder.nix	/^  configure = {$/;"	m
custom	flake.nix	/^          custom = true;$/;"	m
custom	flake.nix	/^            custom = with pkgs.customPlugins; [ ];$/;"	m
custom	flake.nix	/^          custom = true;$/;"	m
customPlugins	customPluginOverlay.nix	/^    customPlugins = {$/;"	m
customRC	nix/wrapNeovim.nix	/^        customRC = configure.customRC or "";$/;"	m
customRC	nix/NeovimBuilder.nix	/^    inherit customRC;$/;"	m
default	flake.nix	/^          default = nixCats;$/;"	m
default	flake.nix	/^          default = final: prev: { inherit nixCats; };$/;"	f
description	flake.nix	/^  description = "A Lua-natic's neovim flake, with extra cats! nixCats!";$/;"	m
devShell	flake.nix	/^        devShell = pkgs.mkShell {$/;"	m
doInstallCheck	customPluginOverlay.nix	/^        doInstallCheck = true;$/;"	m
environmentVariables	flake.nix	/^          environmentVariables = {$/;"	m
extraLuaPackages	nix/NeovimBuilder.nix	/^  extraLuaPackages = combineCatsOfFuncs extraLuaPackages;$/;"	m
extraLuaPackages	flake.nix	/^          extraLuaPackages = {$/;"	m
extraLuaPackages	nix/wrapNeovim.nix	/^        inherit extraLuaPackages;$/;"	m
extraMakeWrapperArgs	nix/NeovimBuilder.nix	/^  inherit extraMakeWrapperArgs;$/;"	m
extraName	nix/NeovimBuilder.nix	/^      extraName = "";$/;"	m
extraName	nix/NeovimBuilder.nix	/^  extraName = config.extraName;$/;"	m
extraName	flake.nix	/^            extraName = "";$/;"	m
extraName	nix/wrapNeovim.nix	/^        inherit extraName;$/;"	m
extraPython3Packages	nix/NeovimBuilder.nix	/^  extraPython3Packages = combineCatsOfFuncs extraPython3Packages;$/;"	m
extraPython3Packages	flake.nix	/^          extraPython3Packages = {$/;"	m
extraPython3Packages	nix/wrapNeovim.nix	/^        inherit extraPython3Packages;$/;"	m
extraPythonPackages	nix/NeovimBuilder.nix	/^  extraPythonPackages = combineCatsOfFuncs extraPythonPackages;$/;"	m
extraPythonPackages	flake.nix	/^          extraPythonPackages = {$/;"	m
extraWrapperArgs	flake.nix	/^          extraWrapperArgs = {$/;"	m
filterAndFlattenAttrsOfLists	nix/utils.nix	/^  filterAndFlattenAttrsOfLists = pkgs: categories: SetOfCategoryLists: let$/;"	f
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
flake	flake.nix	/^      flake = false;$/;"	m
flake-utils	flake.nix	/^    flake-utils = {$/;"	m
general	flake.nix	/^          general = true;$/;"	m
general	flake.nix	/^            general = with pkgs; [$/;"	m
general	flake.nix	/^            general = with pkgs.vimPlugins; [ ];$/;"	m
general	flake.nix	/^          general = true;$/;"	m
general	flake.nix	/^            general = with pkgs.vimPlugins; [$/;"	m
generalBuildInputs	flake.nix	/^          generalBuildInputs = true;$/;"	m
generalBuildInputs	flake.nix	/^          generalBuildInputs = true;$/;"	m
generalBuildInputs	flake.nix	/^            generalBuildInputs = with pkgs; [$/;"	m
gitPlugins	flake.nix	/^            gitPlugins = with pkgs.neovimPlugins; [ ];$/;"	m
gitPlugins	flake.nix	/^            gitPlugins = with pkgs.neovimPlugins; [$/;"	m
gitPlugins	flake.nix	/^          gitPlugins = true;$/;"	m
gitPlugins	flake.nix	/^          gitPlugins = true;$/;"	m
hash	customPluginOverlay.nix	/^            hash = "sha256-kzc9jm6d9PJ07yiWfIOwqxOTAAydTpaLXVK6sEWM8gg=";$/;"	m
inputs	flake.nix	/^  inputs = {$/;"	m
inputsFrom	flake.nix	/^          inputsFrom = [ ];$/;"	m
installCheckPhase	customPluginOverlay.nix	/^        installCheckPhase = ''$/;"	m
legacyWrapper	nix/wrapNeovim.nix	/^  legacyWrapper = pkgs: neovim: {$/;"	f
lspDebugMode	flake.nix	/^          lspDebugMode = false;$/;"	m
lspDebugMode	flake.nix	/^          lspDebugMode = false;$/;"	m
lspsAndRuntimeDeps	flake.nix	/^          lspsAndRuntimeDeps = {$/;"	m
luaListPrinter	nix/utils.nix	/^  luaListPrinter = theList: let$/;"	f
luaTablePrinter	nix/utils.nix	/^  luaTablePrinter = attrSet: let$/;"	f
markdown	flake.nix	/^          markdown = true;$/;"	m
markdown	flake.nix	/^          markdown = true;$/;"	m
markdown	flake.nix	/^            markdown = with pkgs.customPlugins; [$/;"	m
markdown-preview-nvim	customPluginOverlay.nix	/^      markdown-preview-nvim =  let$/;"	m
myVimPackage	nix/NeovimBuilder.nix	/^    packages.myVimPackage = {$/;"	m
name	nix/NeovimBuilder.nix	/^        name = config.RCName;$/;"	m
name	nix/NeovimBuilder.nix	/^      name = "nixCats";$/;"	m
name	nix/pluginOverlay.nix	/^      name = plugName plugin;$/;"	m
name	flake.nix	/^          name = "nixCats.nvim";$/;"	m
nativeBuildInputs	customPluginOverlay.nix	/^        nativeBuildInputs = [ super.nodejs ];$/;"	m
neonixdev	flake.nix	/^          neonixdev = true;$/;"	m
neonixdev	flake.nix	/^          neonixdev = true;$/;"	m
neonixdev	flake.nix	/^            neonixdev = with pkgs; [$/;"	m
neonixdev	flake.nix	/^            neonixdev = [$/;"	m
neovimPlugins	nix/pluginOverlay.nix	/^  neovimPlugins = builtins.listToAttrs (map$/;"	m
nixCats	flake.nix	/^          nixCats = {$/;"	m
nixCats	flake.nix	/^          default = final: prev: { inherit nixCats; };$/;"	m
offlineCache	customPluginOverlay.nix	/^          offlineCache = super.fetchYarnDeps {$/;"	m
opt	nix/NeovimBuilder.nix	/^      inherit opt;$/;"	m
optional	nix/wrapNeovim.nix	/^        start ++ (map (p: { plugin = p; optional = true; }) opt);$/;"	m
optionalPlugins	flake.nix	/^          optionalPlugins = {$/;"	m
outputs	flake.nix	/^  outputs = { self, nixpkgs, flake-utils, ... }@inputs:$/;"	f
overlays	flake.nix	/^          overlays = [$/;"	m
overlays	flake.nix	/^        overlays = {$/;"	m
packageJSON	customPluginOverlay.nix	/^          packageJSON = "\${super.vimPlugins.markdown-preview-nvim.src}\/package.json";$/;"	m
packages	flake.nix	/^          packages = [ nixCats ];$/;"	m
packages	flake.nix	/^        packages = {$/;"	m
pkgs	flake.nix	/^          inherit pkgs;$/;"	m
plugin	nix/wrapNeovim.nix	/^        start ++ (map (p: { plugin = p; optional = true; }) opt);$/;"	m
plugins	nix/wrapNeovim.nix	/^        inherit plugins;$/;"	m
pname	nix/pluginOverlay.nix	/^    pname = plugName name;$/;"	m
pname	customPluginOverlay.nix	/^          inherit (super.vimPlugins.markdown-preview-nvim) pname version;$/;"	m
postInstall	customPluginOverlay.nix	/^        postInstall = ''$/;"	m
propagatedBuildInputs	flake.nix	/^          propagatedBuildInputs = {$/;"	m
propagatedBuildInputs	nix/NeovimBuilder.nix	/^      propagatedBuildInputs = buildInputs;$/;"	m
regularCats	flake.nix	/^          regularCats = final: prev: { inherit regularCats; };$/;"	f
regularCats	flake.nix	/^          regularCats = final: prev: { inherit regularCats; };$/;"	m
regularCats	flake.nix	/^          inherit regularCats;$/;"	m
self	flake.nix	/^          inherit self;$/;"	m
settings	flake.nix	/^          inherit settings;$/;"	m
shellHook	flake.nix	/^          shellHook = ''$/;"	m
src	nix/pluginOverlay.nix	/^    src = builtins.getAttr name inputs;$/;"	m
start	nix/NeovimBuilder.nix	/^      inherit start;$/;"	m
startupPlugins	flake.nix	/^          startupPlugins = {$/;"	m
system	flake.nix	/^          inherit system;$/;"	m
test	flake.nix	/^          test = true;$/;"	m
test	flake.nix	/^            test = [ (_:[]) ];$/;"	m
test	flake.nix	/^          test = true;$/;"	m
test	flake.nix	/^            test = [ (_:[]) ];$/;"	m
test	flake.nix	/^            test = [ (_:[]) ];$/;"	m
test	flake.nix	/^            test = [$/;"	m
test	flake.nix	/^            test = {$/;"	m
theWorstCat	flake.nix	/^          theWorstCat = {$/;"	m
theWorstCat	flake.nix	/^          theWorstCat = {$/;"	m
thing1	flake.nix	/^            thing1 = [ "MEOW" "HISSS" ];$/;"	m
thing1	flake.nix	/^            thing1 = [ "MEOW" "HISSS" ];$/;"	m
thing2	flake.nix	/^            thing2 = [$/;"	m
thing2	flake.nix	/^            thing2 = [$/;"	m
thing3	flake.nix	/^                thing3 = [ "give" "treat" ];$/;"	m
thing3	flake.nix	/^                thing3 = [ "give" "treat" ];$/;"	m
thing4	flake.nix	/^            thing4 = "couch is for scratching";$/;"	m
thing4	flake.nix	/^            thing4 = "couch is for scratching";$/;"	m
unwrappedLua	flake.nix	/^          unwrappedLua = {$/;"	m
url	flake.nix	/^      url = "github:neovim\/nvim-lspconfig";$/;"	m
url	flake.nix	/^    nixd.url = "github:nix-community\/nixd";$/;"	m
url	flake.nix	/^      url = "github:numtide\/flake-utils";$/;"	m
url	flake.nix	/^      url = "github:joshdick\/onedark.vim";$/;"	m
url	flake.nix	/^      url = "github:lewis6991\/gitsigns.nvim";$/;"	m
url	flake.nix	/^      url = "github:folke\/which-key.nvim";$/;"	m
url	flake.nix	/^      url = "github:nvim-lualine\/lualine.nvim";$/;"	m
url	flake.nix	/^      url = "github:numToStr\/Comment.nvim";$/;"	m
url	flake.nix	/^    nixpkgs.url = "github:nixos\/nixpkgs\/nixpkgs-unstable";$/;"	m
url	flake.nix	/^      url = "github:m-demare\/hlargs.nvim";$/;"	m
value	nix/pluginOverlay.nix	/^      value = buildPlug plugin;$/;"	m
version	nix/pluginOverlay.nix	/^    version = "master";$/;"	m
version	customPluginOverlay.nix	/^          inherit (super.vimPlugins.markdown-preview-nvim) pname version;$/;"	m
viAlias	flake.nix	/^            viAlias = true;$/;"	m
viAlias	flake.nix	/^            viAlias = true;$/;"	m
viAlias	nix/NeovimBuilder.nix	/^  viAlias = config.viAlias;$/;"	m
viAlias	nix/NeovimBuilder.nix	/^      viAlias = false;$/;"	m
viAlias	nix/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
vimAlias	nix/NeovimBuilder.nix	/^  vimAlias = config.vimAlias;$/;"	m
vimAlias	flake.nix	/^            vimAlias = true;$/;"	m
vimAlias	flake.nix	/^            vimAlias = true;$/;"	m
vimAlias	nix/NeovimBuilder.nix	/^      vimAlias = false;$/;"	m
vimAlias	nix/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
withNodeJs	nix/NeovimBuilder.nix	/^      withNodeJs = false;$/;"	m
withNodeJs	nix/NeovimBuilder.nix	/^  withNodeJs = config.withNodeJs;$/;"	m
withNodeJs	flake.nix	/^            withNodeJs = false;$/;"	m
withNodeJs	nix/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
withPython3	nix/NeovimBuilder.nix	/^  withPython3 = config.withPython3;$/;"	m
withPython3	nix/NeovimBuilder.nix	/^      withPython3 = true;$/;"	m
withPython3	flake.nix	/^            withPython3 = true;$/;"	m
withPython3	nix/wrapNeovim.nix	/^        inherit withPython3;$/;"	m
withRuby	nix/NeovimBuilder.nix	/^      withRuby = true;$/;"	m
withRuby	nix/NeovimBuilder.nix	/^  withRuby = config.withRuby;$/;"	m
withRuby	flake.nix	/^            withRuby = true;$/;"	m
withRuby	nix/wrapNeovim.nix	/^        inherit withNodeJs withRuby viAlias vimAlias;$/;"	m
wrapNeovim	nix/wrapNeovim.nix	/^  wrapNeovim = pkgs: neovim-unwrapped: pkgs.lib.makeOverridable (legacyWrapper pkgs neovim-unwrapped);$/;"	f
wrapRc	nix/NeovimBuilder.nix	/^      wrapRc = true;$/;"	m
wrapRc	flake.nix	/^            wrapRc = true;$/;"	m
wrapRc	flake.nix	/^            wrapRc = false;$/;"	m
wrapRc	nix/NeovimBuilder.nix	/^  inherit wrapRc;$/;"	m
wrapRc	nix/wrapNeovim.nix	/^      inherit wrapRc;$/;"	m
wrapperArgs	nix/wrapNeovim.nix	/^      wrapperArgs = pkgs.lib.escapeShellArgs res.wrapperArgs + " " + extraMakeWrapperArgs;$/;"	m
yarnLock	customPluginOverlay.nix	/^          yarnLock = "\${super.vimPlugins.markdown-preview-nvim.src}\/yarn.lock";$/;"	m
yarnLock	customPluginOverlay.nix	/^            inherit yarnLock;$/;"	m
